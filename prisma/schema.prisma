// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id           String   @id @default(uuid())
  cpf          String?   @unique // 000.000.000-00
  fullName     String
  email        String   @unique
  phone        String?  // (00) 00000-0000
  zipCode      String?   // 00000-000
  state        String?
  city         String?
  neighborhood String?
  address      String?
  number       String?
  complement   String?
  isAdmin      Boolean  @default(false) // Campo para indicar se o usuário é admin
  password_hash String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  orders       Order[]
  @@map("users")
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  // status      String   // Ex: 'pending', 'shipped', 'delivered'
  // total       Float
  // address     String
  // zipCode     String
  // paymentType String   // Ex: 'credit_card', 'paypal', 'bank_transfer'
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade )
  foods       FoodOnOrder[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  @@map("orders")
}

model Food {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  imgUrl      String?
  orders      FoodOnOrder[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  @@map("foods")
}

model FoodOnOrder {
  orderId     String
  foodId      String
  quantity    Int
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade )
  food        Food    @relation(fields: [foodId], references: [id], onDelete: Cascade )
  @@id([orderId, foodId])
}

